// Generated by CoffeeScript 1.6.3
(function() {
  var canvas, ctx, draw, force, forceTick, initDraw, links, nodes;

  nodes = {};

  $(function() {
    var expandNodes, loadNode, pruneNodes, query;
    query = unescape(location.search.slice(1));
    $.ajax({
      url: "http://en.wikipedia.org/w/api.php",
      cache: true,
      data: {
        action: "opensearch",
        search: query,
        limit: 10,
        namespace: 0,
        format: "json"
      },
      dataType: "jsonp",
      success: function(data) {
        var pageName;
        pageName = data[1][0];
        return loadNode(pageName, function(node) {
          nodes[pageName] = node;
          initDraw();
          return expandNodes(function() {
            pruneNodes();
            return console.log(nodes);
          });
        });
      }
    });
    loadNode = function(pageName, done) {
      var dataHandle, node;
      node = {
        name: pageName,
        links: []
      };
      dataHandle = function(data) {
        var link, page, pageId, _i, _len, _ref, _ref1;
        console.log(data);
        _ref = data.query.pages;
        for (pageId in _ref) {
          page = _ref[pageId];
          if (pageId === "-1") {
            return done(node);
          }
          _ref1 = page.links;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            link = _ref1[_i];
            if (link.ns === 0) {
              node.links.push(link.title);
            }
          }
        }
        if (data["query-continue"]) {
          query.data.plcontinue = data["query-continue"].links.plcontinue;
          return $.ajax(query);
        } else {
          return done(node);
        }
      };
      query = {
        url: "http://en.wikipedia.org/w/api.php",
        cache: true,
        data: {
          action: "query",
          titles: pageName,
          format: "json",
          prop: "links",
          plnamespace: 0,
          pllimit: 500
        },
        dataType: "jsonp",
        success: dataHandle
      };
      return $.ajax(query);
    };
    expandNodes = function(done) {
      var child, expand, neededNodes, node, _, _i, _len, _ref;
      neededNodes = {};
      for (_ in nodes) {
        node = nodes[_];
        _ref = node.links;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          neededNodes[child] = true;
        }
      }
      neededNodes = Object.keys(neededNodes);
      expand = function() {
        var nodeId;
        draw();
        console.log(nodes, neededNodes);
        if (neededNodes.length === 0) {
          return done();
        }
        nodeId = neededNodes.pop();
        if (nodes[nodeId]) {
          return expand();
        }
        return loadNode(nodeId, function(node) {
          nodes[nodeId] = node;
          return expand();
        });
      };
      return expand();
    };
    return pruneNodes = function() {
      var count, link, name, names, node, _, _i, _len, _ref;
      names = {};
      for (_ in nodes) {
        node = nodes[_];
        _ref = node.links;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          link = _ref[_i];
          if (names[link]) {
            ++names[link];
          } else {
            names[link] = 1;
          }
        }
      }
      names = (function() {
        var _results;
        _results = [];
        for (name in names) {
          count = names[name];
          _results.push({
            name: name,
            count: count
          });
        }
        return _results;
      })();
      names.sort(function(a, b) {
        return b.count - a.count;
      });
      return console.log(names.slice(100));
    };
  });

  ctx = void 0;

  canvas = void 0;

  force = void 0;

  initDraw = function() {
    var $canvas, h, w;
    force = d3.layout.force();
    force.size([window.innerWidth, window.innerHeight]);
    force.on("tick", forceTick);
    force.charge(-400);
    force.linkDistance(150);
    force.linkStrength(0.3);
    force.gravity(0.1);
    if (!($("#graph")).length) {
      ($("body")).append($('<div id="graph"></div>'));
    }
    $("#graph").empty();
    $canvas = $("<canvas></canvas>");
    $("#graph").append($canvas);
    canvas = $canvas[0];
    ctx = canvas.getContext("2d");
    $canvas.css({
      position: "absolute",
      top: 0,
      left: 0
    });
    w = window.innerWidth;
    h = window.innerHeight;
    ctx.width = canvas.width = w;
    ctx.height = canvas.height = h;
    canvas.style.width = w + "px";
    return canvas.style.height = h + "px";
  };

  links = void 0;

  draw = function() {
    var link, node, nodeList, _, _i, _len, _ref;
    links = [];
    nodeList = [];
    for (_ in nodes) {
      node = nodes[_];
      nodeList.push(node);
      _ref = node.links;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        link = _ref[_i];
        if (nodes[link]) {
          links.push({
            source: node,
            target: nodes[link]
          });
        }
      }
    }
    force.nodes(nodeList);
    force.links(links);
    return force.start();
  };

  forceTick = function() {
    var link, maxX, maxY, minX, minY, node, nodeList, normX, normY, w, x, y, _, _i, _j, _k, _len, _len1, _len2, _results;
    ctx.lineWidth = 0.3;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    nodeList = (function() {
      var _results;
      _results = [];
      for (_ in nodes) {
        node = nodes[_];
        _results.push(node);
      }
      return _results;
    })();
    nodeList.reverse();
    minX = nodeList[0].x;
    maxX = nodeList[0].x;
    minY = nodeList[0].y;
    maxY = nodeList[0].y;
    for (_i = 0, _len = nodeList.length; _i < _len; _i++) {
      node = nodeList[_i];
      minX = Math.min(minX, node.x);
      maxX = Math.max(maxX, node.x);
      minY = Math.min(minY, node.y);
      maxY = Math.max(maxY, node.y);
    }
    normX = function(x) {
      return 100 + (x - minX) / (maxX - minX) * (canvas.width - 200);
    };
    normY = function(y) {
      return 10 + (y - minY) / (maxY - minY) * (canvas.height - 10);
    };
    ctx.beginPath();
    for (_j = 0, _len1 = links.length; _j < _len1; _j++) {
      link = links[_j];
      ctx.moveTo(normX(link.source.x), normY(link.source.y));
      ctx.lineTo(normX(link.target.x), normY(link.target.y));
    }
    ctx.stroke();
    _results = [];
    for (_k = 0, _len2 = nodeList.length; _k < _len2; _k++) {
      node = nodeList[_k];
      x = normX(node.x);
      y = normY(node.y);
      w = (ctx.measureText(node.name)).width;
      x -= w / 2;
      ctx.fillStyle = 'rgba(255,255,255,.7)';
      ctx.fillRect(x - 2, y - 8, w + 4, 10);
      ctx.fillStyle = 'rgba(0,0,0,1)';
      _results.push(ctx.fillText(node.name, x, y));
    }
    return _results;
  };

}).call(this);
