// Generated by CoffeeScript 1.6.3
(function() {
  var count, dist, h, imgs, margin, name, nextId, vectors, w;

  imgs = (function() {
    var _i, _len, _ref, _results;
    _ref = ["007534061_00001.jpg", "007534061_00002.jpg", "007534061_00003.jpg", "007534061_00004.jpg", "007534061_00005.jpg", "007534061_00006.jpg", "007534061_00007.jpg", "007534061_00008.jpg", "007534061_00009.jpg", "007534061_00010.jpg", "007534061_00011.jpg", "007534061_00012.jpg", "007534061_00013.jpg", "007534061_00014.jpg", "007534061_00015.jpg", "007534061_00016.jpg", "007534061_00017.jpg", "007534061_00018.jpg", "007534061_00019.jpg", "007534061_00020.jpg", "007534061_00021.jpg", "007534061_00022.jpg", "007534061_00023.jpg", "007534061_00024.jpg", "007534061_00025.jpg", "007534061_00026.jpg", "007534061_00027.jpg", "007534061_00028.jpg", "007534061_00029.jpg", "007534061_00030.jpg", "007534061_00031.jpg", "007534061_00032.jpg", "007534061_00033.jpg", "007534061_00034.jpg", "007534061_00112.jpg"];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _results.push("imgs/" + name);
    }
    return _results;
  })();

  nextId = 0;

  w = 300;

  h = 600;

  margin = .1;

  count = 0;

  vectors = {};

  window.isThatKindOfImage = function(url, callback) {
    var img;
    img = new Image(url);
    img.src = url;
    return img.onload = function() {
      var canvas, ctx, dx, dy, id, imData, scale, sum, vector, x, y, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3;
      id = nextId++;
      canvas = document.createElement("canvas");
      canvas.style.width = (canvas.width = w) + "px";
      canvas.style.height = (canvas.height = h) + "px";
      ctx = canvas.getContext("2d");
      ctx.drawImage(img, -w * (1 + margin), -h * margin, w * (1 + margin) * 2, h * (1 + 2 * margin));
      imData = ctx.getImageData(0, 0, w, h);
      ctx.fillText(url, 0, 10);
      imData = ctx.getImageData(0, 0, w, h);
      vector = [];
      scale = 60;
      for (x = _i = 0, _ref = w - 1; scale > 0 ? _i <= _ref : _i >= _ref; x = _i += scale) {
        for (y = _j = 0, _ref1 = h - 1; scale > 0 ? _j <= _ref1 : _j >= _ref1; y = _j += scale) {
          sum = 0;
          for (dx = _k = 0, _ref2 = scale - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; dx = 0 <= _ref2 ? ++_k : --_k) {
            for (dy = _l = 0, _ref3 = scale - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; dy = 0 <= _ref3 ? ++_l : --_l) {
              sum += imData.data[((x + dx) + (y + dy) * w) * 4] > 128 ? 1 : 0;
            }
          }
          vector.push(sum);
        }
      }
      vectors[url] = vector;
      return callback(120 < dist(vector, [3313, 3565, 3600, 3555, 3430, 3424, 3463, 3508, 3600, 3511, 3187, 3357, 3581, 3404, 3099, 3208, 3007, 3354, 3600, 3337, 3566, 3262, 3320, 3290, 3038, 3320, 2949, 3381, 3368, 3560, 3600, 3338, 3561, 3404, 2917, 3298, 2956, 3425, 3580, 3600, 3600, 3600, 3600, 3478, 3262, 3426, 3315, 3554, 3600, 3600]), url);
    };
  };

  dist = function(a, b) {
    var i;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = [0, a.length - 1];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(Math.abs(a[i] - b[i]));
      }
      return _results;
    })()).reduce((function(a, b) {
      return a + b;
    }), 0);
  };

}).call(this);
